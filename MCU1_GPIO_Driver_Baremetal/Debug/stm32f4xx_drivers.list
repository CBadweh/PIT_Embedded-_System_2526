
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800075c  08000764  00001764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800075c  0800075c  00001764  2**0
                  CONTENTS
  4 .ARM          00000000  0800075c  0800075c  00001764  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800075c  08000764  00001764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800075c  0800075c  0000175c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000760  08000760  00001760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001764  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY
 13 .debug_line   00001043  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000077  00000000  00000000  000027d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000a20  00000000  00000000  0000284e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000002ac  00000000  00000000  0000326e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000000c0  00000000  00000000  00003520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006a5e  00000000  00000000  000035e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000085  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00000238  00000000  00000000  0000a0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0000a2fb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000024c  00000000  00000000  0000a340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000744 	.word	0x08000744

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000744 	.word	0x08000744

080001c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001c8:	480d      	ldr	r0, [pc, #52]	@ (8000200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001d0:	480c      	ldr	r0, [pc, #48]	@ (8000204 <LoopForever+0x6>)
  ldr r1, =_edata
 80001d2:	490d      	ldr	r1, [pc, #52]	@ (8000208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001d4:	4a0d      	ldr	r2, [pc, #52]	@ (800020c <LoopForever+0xe>)
  movs r3, #0
 80001d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001d8:	e002      	b.n	80001e0 <LoopCopyDataInit>

080001da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001de:	3304      	adds	r3, #4

080001e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001e4:	d3f9      	bcc.n	80001da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000214 <LoopForever+0x16>)
  movs r3, #0
 80001ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001ec:	e001      	b.n	80001f2 <LoopFillZerobss>

080001ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001f0:	3204      	adds	r2, #4

080001f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001f4:	d3fb      	bcc.n	80001ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001f6:	f000 fa81 	bl	80006fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001fa:	f000 fa5d 	bl	80006b8 <main>

080001fe <LoopForever>:

LoopForever:
  b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>
  ldr   r0, =_estack
 8000200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000208:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800020c:	08000764 	.word	0x08000764
  ldr r2, =_sbss
 8000210:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000214:	2000001c 	.word	0x2000001c

08000218 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC_IRQHandler>
	...

0800021c <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	460b      	mov	r3, r1
 8000226:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000228:	78fb      	ldrb	r3, [r7, #3]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d161      	bne.n	80002f2 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4a33      	ldr	r2, [pc, #204]	@ (8000300 <GPIO_PeriClockControl+0xe4>)
 8000232:	4293      	cmp	r3, r2
 8000234:	d106      	bne.n	8000244 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000236:	4b33      	ldr	r3, [pc, #204]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 8000238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023a:	4a32      	ldr	r2, [pc, #200]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
		//TODO
	}

}
 8000242:	e056      	b.n	80002f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4a30      	ldr	r2, [pc, #192]	@ (8000308 <GPIO_PeriClockControl+0xec>)
 8000248:	4293      	cmp	r3, r2
 800024a:	d106      	bne.n	800025a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800024c:	4b2d      	ldr	r3, [pc, #180]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000250:	4a2c      	ldr	r2, [pc, #176]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 8000252:	f043 0302 	orr.w	r3, r3, #2
 8000256:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000258:	e04b      	b.n	80002f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4a2b      	ldr	r2, [pc, #172]	@ (800030c <GPIO_PeriClockControl+0xf0>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d106      	bne.n	8000270 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000262:	4b28      	ldr	r3, [pc, #160]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 8000264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000266:	4a27      	ldr	r2, [pc, #156]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 8000268:	f043 0304 	orr.w	r3, r3, #4
 800026c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800026e:	e040      	b.n	80002f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4a27      	ldr	r2, [pc, #156]	@ (8000310 <GPIO_PeriClockControl+0xf4>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d106      	bne.n	8000286 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000278:	4b22      	ldr	r3, [pc, #136]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027c:	4a21      	ldr	r2, [pc, #132]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 800027e:	f043 0308 	orr.w	r3, r3, #8
 8000282:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000284:	e035      	b.n	80002f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	4a22      	ldr	r2, [pc, #136]	@ (8000314 <GPIO_PeriClockControl+0xf8>)
 800028a:	4293      	cmp	r3, r2
 800028c:	d106      	bne.n	800029c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800028e:	4b1d      	ldr	r3, [pc, #116]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 8000290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000292:	4a1c      	ldr	r2, [pc, #112]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 8000294:	f043 0310 	orr.w	r3, r3, #16
 8000298:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800029a:	e02a      	b.n	80002f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	4a1e      	ldr	r2, [pc, #120]	@ (8000318 <GPIO_PeriClockControl+0xfc>)
 80002a0:	4293      	cmp	r3, r2
 80002a2:	d106      	bne.n	80002b2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80002a4:	4b17      	ldr	r3, [pc, #92]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a8:	4a16      	ldr	r2, [pc, #88]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002b0:	e01f      	b.n	80002f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a19      	ldr	r2, [pc, #100]	@ (800031c <GPIO_PeriClockControl+0x100>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d106      	bne.n	80002c8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002ba:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002be:	4a11      	ldr	r2, [pc, #68]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 80002c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002c6:	e014      	b.n	80002f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a15      	ldr	r2, [pc, #84]	@ (8000320 <GPIO_PeriClockControl+0x104>)
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d106      	bne.n	80002de <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80002d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 80002d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002dc:	e009      	b.n	80002f2 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a10      	ldr	r2, [pc, #64]	@ (8000324 <GPIO_PeriClockControl+0x108>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d105      	bne.n	80002f2 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80002e6:	4b07      	ldr	r3, [pc, #28]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ea:	4a06      	ldr	r2, [pc, #24]	@ (8000304 <GPIO_PeriClockControl+0xe8>)
 80002ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002f0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40020000 	.word	0x40020000
 8000304:	40023800 	.word	0x40023800
 8000308:	40020400 	.word	0x40020400
 800030c:	40020800 	.word	0x40020800
 8000310:	40020c00 	.word	0x40020c00
 8000314:	40021000 	.word	0x40021000
 8000318:	40021400 	.word	0x40021400
 800031c:	40021800 	.word	0x40021800
 8000320:	40021c00 	.word	0x40021c00
 8000324:	40022000 	.word	0x40022000

08000328 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2101      	movs	r1, #1
 800033a:	4618      	mov	r0, r3
 800033c:	f7ff ff6e 	bl	800021c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	795b      	ldrb	r3, [r3, #5]
 8000344:	2b03      	cmp	r3, #3
 8000346:	d820      	bhi.n	800038a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	795b      	ldrb	r3, [r3, #5]
 800034c:	461a      	mov	r2, r3
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	791b      	ldrb	r3, [r3, #4]
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	fa02 f303 	lsl.w	r3, r2, r3
 8000358:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	791b      	ldrb	r3, [r3, #4]
 8000364:	005b      	lsls	r3, r3, #1
 8000366:	2103      	movs	r1, #3
 8000368:	fa01 f303 	lsl.w	r3, r1, r3
 800036c:	43db      	mvns	r3, r3
 800036e:	4619      	mov	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	400a      	ands	r2, r1
 8000376:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	6819      	ldr	r1, [r3, #0]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	697a      	ldr	r2, [r7, #20]
 8000384:	430a      	orrs	r2, r1
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	e0cb      	b.n	8000522 <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	795b      	ldrb	r3, [r3, #5]
 800038e:	2b04      	cmp	r3, #4
 8000390:	d117      	bne.n	80003c2 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000392:	4b4b      	ldr	r3, [pc, #300]	@ (80004c0 <GPIO_Init+0x198>)
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	7912      	ldrb	r2, [r2, #4]
 800039a:	4611      	mov	r1, r2
 800039c:	2201      	movs	r2, #1
 800039e:	408a      	lsls	r2, r1
 80003a0:	4611      	mov	r1, r2
 80003a2:	4a47      	ldr	r2, [pc, #284]	@ (80004c0 <GPIO_Init+0x198>)
 80003a4:	430b      	orrs	r3, r1
 80003a6:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003a8:	4b45      	ldr	r3, [pc, #276]	@ (80004c0 <GPIO_Init+0x198>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	7912      	ldrb	r2, [r2, #4]
 80003b0:	4611      	mov	r1, r2
 80003b2:	2201      	movs	r2, #1
 80003b4:	408a      	lsls	r2, r1
 80003b6:	43d2      	mvns	r2, r2
 80003b8:	4611      	mov	r1, r2
 80003ba:	4a41      	ldr	r2, [pc, #260]	@ (80004c0 <GPIO_Init+0x198>)
 80003bc:	400b      	ands	r3, r1
 80003be:	6093      	str	r3, [r2, #8]
 80003c0:	e035      	b.n	800042e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	795b      	ldrb	r3, [r3, #5]
 80003c6:	2b05      	cmp	r3, #5
 80003c8:	d117      	bne.n	80003fa <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ca:	4b3d      	ldr	r3, [pc, #244]	@ (80004c0 <GPIO_Init+0x198>)
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	687a      	ldr	r2, [r7, #4]
 80003d0:	7912      	ldrb	r2, [r2, #4]
 80003d2:	4611      	mov	r1, r2
 80003d4:	2201      	movs	r2, #1
 80003d6:	408a      	lsls	r2, r1
 80003d8:	4611      	mov	r1, r2
 80003da:	4a39      	ldr	r2, [pc, #228]	@ (80004c0 <GPIO_Init+0x198>)
 80003dc:	430b      	orrs	r3, r1
 80003de:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003e0:	4b37      	ldr	r3, [pc, #220]	@ (80004c0 <GPIO_Init+0x198>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	7912      	ldrb	r2, [r2, #4]
 80003e8:	4611      	mov	r1, r2
 80003ea:	2201      	movs	r2, #1
 80003ec:	408a      	lsls	r2, r1
 80003ee:	43d2      	mvns	r2, r2
 80003f0:	4611      	mov	r1, r2
 80003f2:	4a33      	ldr	r2, [pc, #204]	@ (80004c0 <GPIO_Init+0x198>)
 80003f4:	400b      	ands	r3, r1
 80003f6:	60d3      	str	r3, [r2, #12]
 80003f8:	e019      	b.n	800042e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	795b      	ldrb	r3, [r3, #5]
 80003fe:	2b06      	cmp	r3, #6
 8000400:	d115      	bne.n	800042e <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000402:	4b2f      	ldr	r3, [pc, #188]	@ (80004c0 <GPIO_Init+0x198>)
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	7912      	ldrb	r2, [r2, #4]
 800040a:	4611      	mov	r1, r2
 800040c:	2201      	movs	r2, #1
 800040e:	408a      	lsls	r2, r1
 8000410:	4611      	mov	r1, r2
 8000412:	4a2b      	ldr	r2, [pc, #172]	@ (80004c0 <GPIO_Init+0x198>)
 8000414:	430b      	orrs	r3, r1
 8000416:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000418:	4b29      	ldr	r3, [pc, #164]	@ (80004c0 <GPIO_Init+0x198>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	7912      	ldrb	r2, [r2, #4]
 8000420:	4611      	mov	r1, r2
 8000422:	2201      	movs	r2, #1
 8000424:	408a      	lsls	r2, r1
 8000426:	4611      	mov	r1, r2
 8000428:	4a25      	ldr	r2, [pc, #148]	@ (80004c0 <GPIO_Init+0x198>)
 800042a:	430b      	orrs	r3, r1
 800042c:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	791b      	ldrb	r3, [r3, #4]
 8000432:	089b      	lsrs	r3, r3, #2
 8000434:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	791b      	ldrb	r3, [r3, #4]
 800043a:	f003 0303 	and.w	r3, r3, #3
 800043e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a1f      	ldr	r2, [pc, #124]	@ (80004c4 <GPIO_Init+0x19c>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d04e      	beq.n	80004e8 <GPIO_Init+0x1c0>
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a1e      	ldr	r2, [pc, #120]	@ (80004c8 <GPIO_Init+0x1a0>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d032      	beq.n	80004ba <GPIO_Init+0x192>
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a1c      	ldr	r2, [pc, #112]	@ (80004cc <GPIO_Init+0x1a4>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d02b      	beq.n	80004b6 <GPIO_Init+0x18e>
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a1b      	ldr	r2, [pc, #108]	@ (80004d0 <GPIO_Init+0x1a8>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d024      	beq.n	80004b2 <GPIO_Init+0x18a>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a19      	ldr	r2, [pc, #100]	@ (80004d4 <GPIO_Init+0x1ac>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d01d      	beq.n	80004ae <GPIO_Init+0x186>
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a18      	ldr	r2, [pc, #96]	@ (80004d8 <GPIO_Init+0x1b0>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d016      	beq.n	80004aa <GPIO_Init+0x182>
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a16      	ldr	r2, [pc, #88]	@ (80004dc <GPIO_Init+0x1b4>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d00f      	beq.n	80004a6 <GPIO_Init+0x17e>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a15      	ldr	r2, [pc, #84]	@ (80004e0 <GPIO_Init+0x1b8>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d008      	beq.n	80004a2 <GPIO_Init+0x17a>
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a13      	ldr	r2, [pc, #76]	@ (80004e4 <GPIO_Init+0x1bc>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d101      	bne.n	800049e <GPIO_Init+0x176>
 800049a:	2308      	movs	r3, #8
 800049c:	e025      	b.n	80004ea <GPIO_Init+0x1c2>
 800049e:	2300      	movs	r3, #0
 80004a0:	e023      	b.n	80004ea <GPIO_Init+0x1c2>
 80004a2:	2307      	movs	r3, #7
 80004a4:	e021      	b.n	80004ea <GPIO_Init+0x1c2>
 80004a6:	2306      	movs	r3, #6
 80004a8:	e01f      	b.n	80004ea <GPIO_Init+0x1c2>
 80004aa:	2305      	movs	r3, #5
 80004ac:	e01d      	b.n	80004ea <GPIO_Init+0x1c2>
 80004ae:	2304      	movs	r3, #4
 80004b0:	e01b      	b.n	80004ea <GPIO_Init+0x1c2>
 80004b2:	2303      	movs	r3, #3
 80004b4:	e019      	b.n	80004ea <GPIO_Init+0x1c2>
 80004b6:	2302      	movs	r3, #2
 80004b8:	e017      	b.n	80004ea <GPIO_Init+0x1c2>
 80004ba:	2301      	movs	r3, #1
 80004bc:	e015      	b.n	80004ea <GPIO_Init+0x1c2>
 80004be:	bf00      	nop
 80004c0:	40013c00 	.word	0x40013c00
 80004c4:	40020000 	.word	0x40020000
 80004c8:	40020400 	.word	0x40020400
 80004cc:	40020800 	.word	0x40020800
 80004d0:	40020c00 	.word	0x40020c00
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40021400 	.word	0x40021400
 80004dc:	40021800 	.word	0x40021800
 80004e0:	40021c00 	.word	0x40021c00
 80004e4:	40022000 	.word	0x40022000
 80004e8:	2300      	movs	r3, #0
 80004ea:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80004ec:	4b59      	ldr	r3, [pc, #356]	@ (8000654 <GPIO_Init+0x32c>)
 80004ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004f0:	4a58      	ldr	r2, [pc, #352]	@ (8000654 <GPIO_Init+0x32c>)
 80004f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004f6:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80004f8:	7c7a      	ldrb	r2, [r7, #17]
 80004fa:	7cbb      	ldrb	r3, [r7, #18]
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	fa02 f103 	lsl.w	r1, r2, r3
 8000502:	4a55      	ldr	r2, [pc, #340]	@ (8000658 <GPIO_Init+0x330>)
 8000504:	7cfb      	ldrb	r3, [r7, #19]
 8000506:	3302      	adds	r3, #2
 8000508:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800050c:	4b53      	ldr	r3, [pc, #332]	@ (800065c <GPIO_Init+0x334>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	7912      	ldrb	r2, [r2, #4]
 8000514:	4611      	mov	r1, r2
 8000516:	2201      	movs	r2, #1
 8000518:	408a      	lsls	r2, r1
 800051a:	4611      	mov	r1, r2
 800051c:	4a4f      	ldr	r2, [pc, #316]	@ (800065c <GPIO_Init+0x334>)
 800051e:	430b      	orrs	r3, r1
 8000520:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	799b      	ldrb	r3, [r3, #6]
 8000526:	461a      	mov	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	fa02 f303 	lsl.w	r3, r2, r3
 8000532:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	689a      	ldr	r2, [r3, #8]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	2103      	movs	r1, #3
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	43db      	mvns	r3, r3
 8000548:	4619      	mov	r1, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	400a      	ands	r2, r1
 8000550:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	6899      	ldr	r1, [r3, #8]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	697a      	ldr	r2, [r7, #20]
 800055e:	430a      	orrs	r2, r1
 8000560:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	79db      	ldrb	r3, [r3, #7]
 8000566:	461a      	mov	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	68da      	ldr	r2, [r3, #12]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	2103      	movs	r1, #3
 8000582:	fa01 f303 	lsl.w	r3, r1, r3
 8000586:	43db      	mvns	r3, r3
 8000588:	4619      	mov	r1, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	400a      	ands	r2, r1
 8000590:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	68d9      	ldr	r1, [r3, #12]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	697a      	ldr	r2, [r7, #20]
 800059e:	430a      	orrs	r2, r1
 80005a0:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7a1b      	ldrb	r3, [r3, #8]
 80005a6:	461a      	mov	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	fa02 f303 	lsl.w	r3, r2, r3
 80005b0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	685a      	ldr	r2, [r3, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	4619      	mov	r1, r3
 80005be:	2301      	movs	r3, #1
 80005c0:	408b      	lsls	r3, r1
 80005c2:	43db      	mvns	r3, r3
 80005c4:	4619      	mov	r1, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	400a      	ands	r2, r1
 80005cc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	6859      	ldr	r1, [r3, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	430a      	orrs	r2, r1
 80005dc:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d131      	bne.n	800064a <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	08db      	lsrs	r3, r3, #3
 80005ec:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	7c3a      	ldrb	r2, [r7, #16]
 80005fe:	3208      	adds	r2, #8
 8000600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	220f      	movs	r2, #15
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	43db      	mvns	r3, r3
 8000610:	4618      	mov	r0, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	7c3a      	ldrb	r2, [r7, #16]
 8000618:	4001      	ands	r1, r0
 800061a:	3208      	adds	r2, #8
 800061c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	7c3a      	ldrb	r2, [r7, #16]
 8000626:	3208      	adds	r2, #8
 8000628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	7a5b      	ldrb	r3, [r3, #9]
 8000630:	461a      	mov	r2, r3
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	4618      	mov	r0, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	7c3a      	ldrb	r2, [r7, #16]
 8000642:	4301      	orrs	r1, r0
 8000644:	3208      	adds	r2, #8
 8000646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800064a:	bf00      	nop
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40013800 	.word	0x40013800
 800065c:	40013c00 	.word	0x40013c00

08000660 <GPIO_ToggleOutputPin>:
 *
 * @Note              -

 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR  ^= ( 1 << PinNumber);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	78fa      	ldrb	r2, [r7, #3]
 8000672:	2101      	movs	r1, #1
 8000674:	fa01 f202 	lsl.w	r2, r1, r2
 8000678:	405a      	eors	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	615a      	str	r2, [r3, #20]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
	...

0800068c <delay>:

#include "stm32f407xx.h"


void delay(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	e002      	b.n	800069e <delay+0x12>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3301      	adds	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a04      	ldr	r2, [pc, #16]	@ (80006b4 <delay+0x28>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d9f8      	bls.n	8000698 <delay+0xc>
}
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	0007a11f 	.word	0x0007a11f

080006b8 <main>:


int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = GPIOD;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <main+0x40>)
 80006c0:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80006c2:	230c      	movs	r3, #12
 80006c4:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80006c6:	2301      	movs	r3, #1
 80006c8:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80006ca:	2302      	movs	r3, #2
 80006cc:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80006ce:	2301      	movs	r3, #1
 80006d0:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80006d2:	2300      	movs	r3, #0
 80006d4:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 80006d6:	2101      	movs	r1, #1
 80006d8:	4807      	ldr	r0, [pc, #28]	@ (80006f8 <main+0x40>)
 80006da:	f7ff fd9f 	bl	800021c <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fe21 	bl	8000328 <GPIO_Init>

	while(1)
	{
		GPIO_ToggleOutputPin(GPIOD,GPIO_PIN_NO_12);
 80006e6:	210c      	movs	r1, #12
 80006e8:	4803      	ldr	r0, [pc, #12]	@ (80006f8 <main+0x40>)
 80006ea:	f7ff ffb9 	bl	8000660 <GPIO_ToggleOutputPin>
		delay();
 80006ee:	f7ff ffcd 	bl	800068c <delay>
		GPIO_ToggleOutputPin(GPIOD,GPIO_PIN_NO_12);
 80006f2:	bf00      	nop
 80006f4:	e7f7      	b.n	80006e6 <main+0x2e>
 80006f6:	bf00      	nop
 80006f8:	40020c00 	.word	0x40020c00

080006fc <__libc_init_array>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000734 <__libc_init_array+0x38>)
 8000700:	4c0d      	ldr	r4, [pc, #52]	@ (8000738 <__libc_init_array+0x3c>)
 8000702:	1b64      	subs	r4, r4, r5
 8000704:	10a4      	asrs	r4, r4, #2
 8000706:	2600      	movs	r6, #0
 8000708:	42a6      	cmp	r6, r4
 800070a:	d109      	bne.n	8000720 <__libc_init_array+0x24>
 800070c:	4d0b      	ldr	r5, [pc, #44]	@ (800073c <__libc_init_array+0x40>)
 800070e:	4c0c      	ldr	r4, [pc, #48]	@ (8000740 <__libc_init_array+0x44>)
 8000710:	f000 f818 	bl	8000744 <_init>
 8000714:	1b64      	subs	r4, r4, r5
 8000716:	10a4      	asrs	r4, r4, #2
 8000718:	2600      	movs	r6, #0
 800071a:	42a6      	cmp	r6, r4
 800071c:	d105      	bne.n	800072a <__libc_init_array+0x2e>
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f855 3b04 	ldr.w	r3, [r5], #4
 8000724:	4798      	blx	r3
 8000726:	3601      	adds	r6, #1
 8000728:	e7ee      	b.n	8000708 <__libc_init_array+0xc>
 800072a:	f855 3b04 	ldr.w	r3, [r5], #4
 800072e:	4798      	blx	r3
 8000730:	3601      	adds	r6, #1
 8000732:	e7f2      	b.n	800071a <__libc_init_array+0x1e>
 8000734:	0800075c 	.word	0x0800075c
 8000738:	0800075c 	.word	0x0800075c
 800073c:	0800075c 	.word	0x0800075c
 8000740:	08000760 	.word	0x08000760

08000744 <_init>:
 8000744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000746:	bf00      	nop
 8000748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074a:	bc08      	pop	{r3}
 800074c:	469e      	mov	lr, r3
 800074e:	4770      	bx	lr

08000750 <_fini>:
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	bf00      	nop
 8000754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000756:	bc08      	pop	{r3}
 8000758:	469e      	mov	lr, r3
 800075a:	4770      	bx	lr
