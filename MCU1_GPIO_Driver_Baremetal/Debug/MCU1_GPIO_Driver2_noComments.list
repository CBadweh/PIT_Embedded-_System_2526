
MCU1_GPIO_Driver2_noComments.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000178  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000300  08000308  00001308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000300  08000300  00001308  2**0
                  CONTENTS
  4 .ARM          00000000  08000300  08000300  00001308  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000300  08000308  00001308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000300  08000300  00001300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000304  08000304  00001304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001308  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY
 13 .debug_line   000004de  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000082  00000000  00000000  00001816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000000fe  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000000b2  00000000  00000000  00001996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000050  00000000  00000000  00001a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003daf  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000032  00000000  00000000  00005847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00000093  00000000  00000000  00005879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0000590c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000080  00000000  00000000  00005950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080002e8 	.word	0x080002e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080002e8 	.word	0x080002e8

080001c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001c8:	480d      	ldr	r0, [pc, #52]	@ (8000200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001d0:	480c      	ldr	r0, [pc, #48]	@ (8000204 <LoopForever+0x6>)
  ldr r1, =_edata
 80001d2:	490d      	ldr	r1, [pc, #52]	@ (8000208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001d4:	4a0d      	ldr	r2, [pc, #52]	@ (800020c <LoopForever+0xe>)
  movs r3, #0
 80001d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001d8:	e002      	b.n	80001e0 <LoopCopyDataInit>

080001da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001de:	3304      	adds	r3, #4

080001e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001e4:	d3f9      	bcc.n	80001da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000214 <LoopForever+0x16>)
  movs r3, #0
 80001ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001ec:	e001      	b.n	80001f2 <LoopFillZerobss>

080001ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001f0:	3204      	adds	r2, #4

080001f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001f4:	d3fb      	bcc.n	80001ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001f6:	f000 f853 	bl	80002a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001fa:	f000 f825 	bl	8000248 <main>

080001fe <LoopForever>:

LoopForever:
  b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>
  ldr   r0, =_estack
 8000200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000208:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800020c:	08000308 	.word	0x08000308
  ldr r2, =_sbss
 8000210:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000214:	2000001c 	.word	0x2000001c

08000218 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC_IRQHandler>
	...

0800021c <delay>:
#define GPIOD_MODER     (*(volatile uint32_t *)(GPIOD_BASE + 0x00))
#define GPIOD_OTYPER    (*(volatile uint32_t *)(GPIOD_BASE + 0x04))
#define GPIOD_ODR       (*(volatile uint32_t *)(GPIOD_BASE + 0x14))

// Simple delay loop
static void delay(void) {
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
    for (volatile uint32_t i = 0; i < 500000; i++);
 8000222:	2300      	movs	r3, #0
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	e002      	b.n	800022e <delay+0x12>
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3301      	adds	r3, #1
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4a04      	ldr	r2, [pc, #16]	@ (8000244 <delay+0x28>)
 8000232:	4293      	cmp	r3, r2
 8000234:	d9f8      	bls.n	8000228 <delay+0xc>
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr
 8000244:	0007a11f 	.word	0x0007a11f

08000248 <main>:

int main(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
    // 1. Enable GPIOD clock (bit 3 in AHB1ENR)
    RCC_AHB1ENR |= (1 << 3);
 800024c:	4b10      	ldr	r3, [pc, #64]	@ (8000290 <main+0x48>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a0f      	ldr	r2, [pc, #60]	@ (8000290 <main+0x48>)
 8000252:	f043 0308 	orr.w	r3, r3, #8
 8000256:	6013      	str	r3, [r2, #0]

    // 2. Set PD12 as output (MODER12 = 01)
    GPIOD_MODER &= ~(3U << (12 * 2));  // Clear bits
 8000258:	4b0e      	ldr	r3, [pc, #56]	@ (8000294 <main+0x4c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a0d      	ldr	r2, [pc, #52]	@ (8000294 <main+0x4c>)
 800025e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000262:	6013      	str	r3, [r2, #0]
    GPIOD_MODER |=  (1U << (12 * 2));  // Set 01
 8000264:	4b0b      	ldr	r3, [pc, #44]	@ (8000294 <main+0x4c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a0a      	ldr	r2, [pc, #40]	@ (8000294 <main+0x4c>)
 800026a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800026e:	6013      	str	r3, [r2, #0]

    // 3. Set PD12 as push-pull (OTYPER12 = 0)
    GPIOD_OTYPER &= ~(1U << 12);
 8000270:	4b09      	ldr	r3, [pc, #36]	@ (8000298 <main+0x50>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a08      	ldr	r2, [pc, #32]	@ (8000298 <main+0x50>)
 8000276:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800027a:	6013      	str	r3, [r2, #0]

    // 4. Toggle PD12 in an infinite loop
    while (1) {
        GPIOD_ODR ^= (1 << 12);  // Toggle bit 12
 800027c:	4b07      	ldr	r3, [pc, #28]	@ (800029c <main+0x54>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a06      	ldr	r2, [pc, #24]	@ (800029c <main+0x54>)
 8000282:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8000286:	6013      	str	r3, [r2, #0]
        delay();
 8000288:	f7ff ffc8 	bl	800021c <delay>
        GPIOD_ODR ^= (1 << 12);  // Toggle bit 12
 800028c:	bf00      	nop
 800028e:	e7f5      	b.n	800027c <main+0x34>
 8000290:	40023830 	.word	0x40023830
 8000294:	40020c00 	.word	0x40020c00
 8000298:	40020c04 	.word	0x40020c04
 800029c:	40020c14 	.word	0x40020c14

080002a0 <__libc_init_array>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	4d0d      	ldr	r5, [pc, #52]	@ (80002d8 <__libc_init_array+0x38>)
 80002a4:	4c0d      	ldr	r4, [pc, #52]	@ (80002dc <__libc_init_array+0x3c>)
 80002a6:	1b64      	subs	r4, r4, r5
 80002a8:	10a4      	asrs	r4, r4, #2
 80002aa:	2600      	movs	r6, #0
 80002ac:	42a6      	cmp	r6, r4
 80002ae:	d109      	bne.n	80002c4 <__libc_init_array+0x24>
 80002b0:	4d0b      	ldr	r5, [pc, #44]	@ (80002e0 <__libc_init_array+0x40>)
 80002b2:	4c0c      	ldr	r4, [pc, #48]	@ (80002e4 <__libc_init_array+0x44>)
 80002b4:	f000 f818 	bl	80002e8 <_init>
 80002b8:	1b64      	subs	r4, r4, r5
 80002ba:	10a4      	asrs	r4, r4, #2
 80002bc:	2600      	movs	r6, #0
 80002be:	42a6      	cmp	r6, r4
 80002c0:	d105      	bne.n	80002ce <__libc_init_array+0x2e>
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c8:	4798      	blx	r3
 80002ca:	3601      	adds	r6, #1
 80002cc:	e7ee      	b.n	80002ac <__libc_init_array+0xc>
 80002ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d2:	4798      	blx	r3
 80002d4:	3601      	adds	r6, #1
 80002d6:	e7f2      	b.n	80002be <__libc_init_array+0x1e>
 80002d8:	08000300 	.word	0x08000300
 80002dc:	08000300 	.word	0x08000300
 80002e0:	08000300 	.word	0x08000300
 80002e4:	08000304 	.word	0x08000304

080002e8 <_init>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	bf00      	nop
 80002ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ee:	bc08      	pop	{r3}
 80002f0:	469e      	mov	lr, r3
 80002f2:	4770      	bx	lr

080002f4 <_fini>:
 80002f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f6:	bf00      	nop
 80002f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fa:	bc08      	pop	{r3}
 80002fc:	469e      	mov	lr, r3
 80002fe:	4770      	bx	lr
